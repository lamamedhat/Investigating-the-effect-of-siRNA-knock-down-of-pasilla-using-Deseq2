remove.packages("DESeq2")
BiocManager::install("DESeq2", dependencies = FALSE , force = TRUE)
library(DESeq2)
library(DESeq2)
BiocManager::install(version = 'devel')
BiocManager::install("BiocVersion")
BiocManager::install("BiocVersion", force = TRUE)
BiocManager::install("GenomicInfoDbData")
sessionInfo()
BiocManager::install("GenomicRanges", dependencies = TRUE)
BiocManager::install("GenomicRanges", dependencies = TRUE)
BiocManager::install("GenomicRanges", dependencies = TRUE , force = TRUE)
library(GenomicRanges)
install.packages("C:/Users/HP/Downloads/GenomeInfoDb", repos = NULL , type = "source")
library(DESeq2)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(tinytex)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(tinytex)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(tinytex)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(tinytex)
read_count_data <- function(file_path){
counts_data <- read.csv(file_path, row.names = 1)
return (head(counts_data))
}
read_count_data("pasilla_gene_exp.csv")
read_metadata <- function(file_path){
coldata <- read.csv(file_path, row.names = 1)
return (coldata)
}
read_metadata("pasilla_meta.data.csv")
convert_chr_to_factor <- function(){
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
}
convert_chr_to_factor()
read_metadata <- function(file_path){
coldata <<- read.csv(file_path, row.names = 1)
return (coldata)
}
read_metadata("pasilla_meta.data.csv")
convert_chr_to_factor <- function(){
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
}
convert_chr_to_factor()
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(tinytex)
read_count_data <- function(file_path){
counts_data <<- read.csv(file_path, row.names = 1)
return (head(counts_data))
}
read_count_data("pasilla_gene_exp.csv")
read_count_data <- function(file_path){
counts_data <<- read.csv(file_path, row.names = 1)
return (head(counts_data))
}
read_count_data("pasilla_gene_exp.csv")
read_metadata <- function(file_path){
coldata <<- read.csv(file_path, row.names = 1)
return (coldata)
}
read_metadata("pasilla_meta.data.csv")
convert_chr_to_factor <- function(){
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
}
convert_chr_to_factor()
all(rownames(coldata) %in% colnames(counts_data))
all(rownames(coldata) == colnames(counts_data))
counts_data <- counts_data[, rownames(coldata)]
all(rownames(coldata) == colnames(counts_data))
deseqdataset <- DESeqDataSetFromMatrix(countData = counts_data,
colData = coldata,
design = ~ condition)
deseqdataset
pre_filter <- function(){
keep <- rowSums(counts(deseqdataset)) >=10
deseqdataset <- deseqdataset[keep,]
return (deseqdataset)
}
pre_filter()
factor_level <- function(){
deseqdataset$condition <- relevel(deseqdataset$condition, ref = "untreated")
}
factor_level()
diff_expr_analysis <- function(){
deseqdataset <- DESeq(deseqdataset)
result <<- results(deseqdataset)
result01 <<- results(deseqdataset, alpha = 0.01 , lfcThreshold = 1.5)
return (result01)
}
diff_expr_analysis()
ordered_result <- result01[order(result01$pvalue, decreasing = TRUE), ]
top10 <- head(ordered_result, n=10)
top10
summary(result)
summary(result01)
sum(result01$padj < 0.01 , na.rm = TRUE)
write_sig_genes <- function(out_path){
write.csv(ordered_result, file = out_path)
}
write_sig_genes("Significant genes.csv")
ma_plot <- function(){
plotMA(result01)
}
ma_plot()
plot_counts <- function(){
plotCounts(deseqdataset, gene = which.min(result01$padj), intgroup = "condition")
}
plot_counts()
heatmap <- function(){
select <- order(rowMeans(counts(deseqdataset)),
decreasing = TRUE)[1:20]
df <- as.data.frame(colData(deseqdataset)[,c("condition","type")])
pheatmap::pheatmap(assay(deseqdataset)[select,], cluster_rows = FALSE,
show_rownames = FALSE, cluster_cols = FALSE,
annotation_col = df)
}
heatmap()
pca_plot <- function(){
normalized = normTransform(deseqdataset)
plotPCA(normalized, intgroup=c("condition","type"))
}
pca_plot()
vplcano_plot <- function(){
result.df <- as.data.frame(result)
result.df$diffexpressed <- "NO"
result.df$diffexpressed[result.df$log2FoldChange > 1.5 &
result.df$padj < 0.01] <- "UP"
result.df$diffexpressed[result.df$log2FoldChange < -1.5 &
result.df$padg < 0.01] <- "DOWN"
ggplot(data = result.df, aes(x = log2FoldChange, y = -log10(pvalue),
col = diffexpressed))+
geom_point()+ theme_minimal()+
geom_vline(xintercept = c(-1.5, 1.5), col = "black", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.01), col = "black", linetype = 'dashed') +
scale_color_manual(values = c("#00AFBB", "grey", "#FFDB6D"),
labels = c("Downregulated", "Not significant", "Upregulated"))
}
vplcano_plot()
vplcano_plot <- function(){
result.df <- as.data.frame(result)
result.df$diffexpressed <- "NO"
result.df$diffexpressed[result.df$log2FoldChange > 1.5 &
result.df$padj < 0.01] <- "UP"
result.df$diffexpressed[result.df$log2FoldChange < -1.5 &
result.df$padj < 0.01] <- "DOWN"
ggplot(data = result.df, aes(x = log2FoldChange, y = -log10(pvalue),
col = diffexpressed))+
geom_point()+ theme_minimal()+
geom_vline(xintercept = c(-1.5, 1.5), col = "black", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.01), col = "black", linetype = 'dashed') +
scale_color_manual(values = c("#00AFBB", "grey", "#FFDB6D"),
labels = c("Downregulated", "Not significant", "Upregulated"))
}
vplcano_plot()
